import type { Context } from 'telegraf';
import { Markup } from 'telegraf';
import type { SessionData } from './types';
import { makeGeoLink } from './geo';

export function ensureSession(ctx: Context): SessionData {
  const anyCtx = ctx as any;
  if (!anyCtx.session) anyCtx.session = {};
  return anyCtx.session as SessionData;
}

export async function sendReplacing(
  ctx: Context,
  text: string,
  extra?: Parameters<Context['reply']>[1]
) {
  const s = ensureSession(ctx);
  try {
    if (s._lastMessageId) {
      await ctx.deleteMessage(s._lastMessageId).catch(() => {});
      s._lastMessageId = undefined;
    }
  } catch {}
  const msg = await ctx.reply(text, extra as any);
  if (msg && typeof (msg as any).message_id === 'number') {
    s._lastMessageId = (msg as any).message_id as number;
  }
}

export function mapButtons(
  point: { lat: number; lon: number },
  label = '–û—Ç–∫—Ä—ã—Ç—å –≤ 2–ì–ò–°'
) {
  const url = makeGeoLink(point);
  return Markup.inlineKeyboard([[Markup.button.url(`üó∫Ô∏è ${label}`, url)]]);
}

// –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é (—ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è, —Ç.–∫. –µ–≥–æ –∂–¥—É—Ç –¥—Ä—É–≥–∏–µ —Ñ–∞–π–ª—ã)
export async function replyMainMenu(ctx: Context) {
  await sendReplacing(
    ctx,
    '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
    Markup.keyboard([
      ['üöï –ó–∞–∫–∞–∑–∞—Ç—å —Ç–∞–∫—Å–∏'],
      ['üì¶ –ó–∞–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç–∞–≤–∫—É'],
      ['‚òéÔ∏è –ü–æ–¥–¥–µ—Ä–∂–∫–∞']
    ])
      .resize()
      .oneTime()
  );
}
