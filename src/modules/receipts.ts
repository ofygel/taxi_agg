import PDFDocument from 'pdfkit';
import { getStorageBuffer } from './storage';
import { PDF_LOGO_PATH, PDF_STAMP_PATH } from '../config';
import { fmtPhone } from '../utils';

/** –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç –∫–≤–∏—Ç–∞–Ω—Ü–∏–∏ */
export function makeReceiptText(o: any, driver: any, client: any) {
  const lines: string[] = [];
  lines.push('üßæ –ö–≤–∏—Ç–∞–Ω—Ü–∏—è');
  lines.push(`ID: ${o.id}`);

  if (o.from_text) lines.push(`–û—Ç–∫—É–¥–∞: ${o.from_text}`);
  if (o.to_text) lines.push(`–ö—É–¥–∞: ${o.to_text}`);
  if (o.distance_km) lines.push(`–î–∏—Å—Ç–∞–Ω—Ü–∏—è: ~${Number(o.distance_km).toFixed(1)} –∫–º`);

  if (o.accepted_at) lines.push(`–ü—Ä–∏–Ω—è—Ç: ${new Date(o.accepted_at).toLocaleString()}`);
  if (o.arrived_at) lines.push(`–ü—Ä–∏–±—ã–ª –∫ –ê: ${new Date(o.arrived_at).toLocaleString()}`);
  if (o.picked_up_at) lines.push(`–ü–∞—Å—Å–∞–∂–∏—Ä –≤ –º–∞—à–∏–Ω–µ: ${new Date(o.picked_up_at).toLocaleString()}`);
  if (o.tracking_started_at) lines.push(`–°—Ç–∞—Ä—Ç –ø–æ–µ–∑–¥–∫–∏: ${new Date(o.tracking_started_at).toLocaleString()}`);
  if (o.completed_at) lines.push(`–ó–∞–≤–µ—Ä—à–µ–Ω–æ: ${new Date(o.completed_at).toLocaleString()}`);

  lines.push(`–ò—Ç–æ–≥: ${o.fare_final_tg || o.fare_fixed_tg || '-'} —Ç–≥`);

  if (driver)
    lines.push(`–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: ${driver.first_name || driver.telegram_id} ${
      driver.phone ? '(' + fmtPhone(driver.phone) + ')' : ''
    }`);
  if (client) lines.push(`–ö–ª–∏–µ–Ω—Ç: ${client.first_name || client.telegram_id}`);

  return lines.join('\n');
}

/** –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å PDF –∫–≤–∏—Ç–∞–Ω—Ü–∏—é */
export async function makeReceiptPDF(o: any, driver: any, client: any) {
  try {
    const logoBuf = await getStorageBuffer(PDF_LOGO_PATH);
    const stampBuf = await getStorageBuffer(PDF_STAMP_PATH);

    return await new Promise<Buffer>((resolve) => {
      const doc = new PDFDocument({ size: 'A4', margin: 50 });
      const chunks: Buffer[] = [];

      doc.on('data', (c: Buffer) => chunks.push(c));
      doc.on('end', () => resolve(Buffer.concat(chunks)));

      if (logoBuf) {
        try {
          doc.image(logoBuf, 50, 40, { fit: [120, 60] });
        } catch {}
      }

      doc.fontSize(20).text('–ö–≤–∏—Ç–∞–Ω—Ü–∏—è –ø–æ –ø–æ–µ–∑–¥–∫–µ/–¥–æ—Å—Ç–∞–≤–∫–µ', 0, 120, { align: 'center' });
      doc.moveDown();
      doc.fontSize(12);

      doc.text(`ID –∑–∞–∫–∞–∑–∞: ${o.id}`);
      if (o.distance_km) doc.text(`–î–∏—Å—Ç–∞–Ω—Ü–∏—è: ~${Number(o.distance_km).toFixed(1)} –∫–º`);

      doc.moveDown(0.5);
      if (o.from_text) doc.text(`–û—Ç–∫—É–¥–∞: ${o.from_text}`);
      if (o.to_text) doc.text(`–ö—É–¥–∞: ${o.to_text}`);

      doc.moveDown(0.5);
      if (o.accepted_at) doc.text(`–ü—Ä–∏–Ω—è—Ç: ${new Date(o.accepted_at).toLocaleString()}`);
      if (o.arrived_at) doc.text(`–ü—Ä–∏–±—ã–ª –∫ –ê: ${new Date(o.arrived_at).toLocaleString()}`);
      if (o.picked_up_at) doc.text(`–ü–∞—Å—Å–∞–∂–∏—Ä –≤ –º–∞—à–∏–Ω–µ: ${new Date(o.picked_up_at).toLocaleString()}`);
      if (o.tracking_started_at) doc.text(`–°—Ç–∞—Ä—Ç –ø–æ–µ–∑–¥–∫–∏: ${new Date(o.tracking_started_at).toLocaleString()}`);
      if (o.completed_at) doc.text(`–ó–∞–≤–µ—Ä—à–µ–Ω–æ: ${new Date(o.completed_at).toLocaleString()}`);

      doc.moveDown(0.5);
      doc.text(`–ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: ${o.fare_final_tg || o.fare_fixed_tg || '-'} —Ç–≥`);

      doc.moveDown();
      if (driver)
        doc.text(
          `–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: ${driver.first_name || driver.telegram_id} ${
            driver.phone ? '(' + fmtPhone(driver.phone) + ')' : ''
          }`
        );
      if (client) doc.text(`–ö–ª–∏–µ–Ω—Ç: ${client.first_name || client.telegram_id}`);

      if (stampBuf) {
        try {
          doc.image(stampBuf, 400, 680, { fit: [150, 150], align: 'right' });
        } catch {}
      }

      doc.end();
    });
  } catch {
    return null;
  }
}
