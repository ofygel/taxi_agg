import { Telegraf, type Context, Markup } from 'telegraf';
import type { VerifFile, Role } from '@/types';
import { ensureSession, sendReplacing } from '@/shared';
import {
  createVerification,
  setVerificationStatus,
  getSetting
} from '@/supabase';

const pendingReasonByMsg = new Map<number, number>(); // msg_id ‚Üí userId

function instructionsByRole(role: Role | undefined) {
  if (role === 'DRIVER')
    return '–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –≤–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ —É–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏—è –∏ —Å–µ–ª—Ñ–∏ —Å —É–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏–µ–º.';
  if (role === 'COURIER')
    return '–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —É–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏—è –ª–∏—á–Ω–æ—Å—Ç–∏ —Å –æ–±–µ–∏—Ö —Å—Ç–æ—Ä–æ–Ω.';
  return '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏.';
}

export function register(bot: Telegraf<Context>) {
  bot.action('go_verify', async (ctx: Context) => {
    await ctx.answerCbQuery();
    const s = ensureSession(ctx);
    s.collecting = true;
    s.files = [];
    await sendReplacing(
      ctx,
      `${instructionsByRole(s.role)}\n–§–∞–π–ª–æ-—Å—á—ë—Ç—á–∏–∫: 0`,
      Markup.inlineKeyboard([
        [Markup.button.callback('üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É', 'verif_send')]
      ])
    );
  });

  bot.on(['photo', 'document'], async (ctx: Context) => {
    const s = ensureSession(ctx);
    if (!s.collecting) return;

    const files = s.files as VerifFile[];
    const m = ctx.message;
    if (!m) return;

    if ('photo' in m && Array.isArray(m.photo)) {
      const p = m.photo[m.photo.length - 1];
      files.push({ file_id: p.file_id });
    } else if ('document' in m && m.document) {
      files.push({
        file_id: m.document.file_id,
        file_name: m.document.file_name ?? undefined,
        mime_type: m.document.mime_type ?? undefined,
        size: m.document.file_size ?? undefined
      });
    }
    await sendReplacing(
      ctx,
      `–§–∞–π–ª–æ-—Å—á—ë—Ç—á–∏–∫: ${files.length}`,
      Markup.inlineKeyboard([
        [Markup.button.callback('üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É', 'verif_send')]
      ])
    );
  });

  bot.action('verif_send', async (ctx: Context) => {
    await ctx.answerCbQuery();
    const s = ensureSession(ctx);
    const files = (s.files ?? []) as VerifFile[];
    const verifyChan = await getSetting('verify_channel_id');
    if (!verifyChan)
      return ctx.reply(
        '–ö–∞–Ω–∞–ª –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω. –ó–∞–ø—É—Å—Ç–∏—Ç–µ /bind_verify_channel –≤–Ω—É—Ç—Ä–∏ –∫–∞–Ω–∞–ª–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏.'
      );

    await createVerification((ctx.from as any).id, (s.role ?? 'DRIVER'), files);

    const list =
      files.map((f, i) => `${i + 1}. ${f.file_name ?? f.file_id}`).join('\n') ||
      '(–ø—É—Å—Ç–æ)';
    const m = await ctx.telegram.sendMessage(
      verifyChan,
      `–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É
–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @${(ctx.from as any).username ?? (ctx.from as any).id}
–†–æ–ª—å: ${s.role}
–§–∞–π–ª—ã:
${list}`,
      Markup.inlineKeyboard([
        [Markup.button.callback('‚úÖ –ü—Ä–∏–Ω—è—Ç—å', `mod_accept:${(ctx.from as any).id}`)],
        [Markup.button.callback('‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å', `mod_reject:${(ctx.from as any).id}`)]
      ])
    );

    pendingReasonByMsg.set((m as any).message_id, (ctx.from as any).id);

    s.collecting = false;
    s.files = [];
    await sendReplacing(ctx, '–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞. –û–∂–∏–¥–∞–π—Ç–µ —Ä–µ—à–µ–Ω–∏—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏.');
  });

  bot.action(/mod_accept:(\d+)/, async (ctx: Context) => {
    await ctx.answerCbQuery();
    const match = (ctx as any).match as RegExpExecArray | undefined;
    if (!match) return;
    const userId = Number(match[1]);
    await setVerificationStatus(userId, 'APPROVED');
    await ctx.editMessageText(`–ó–∞—è–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId} ‚Äî ‚úÖ –ø—Ä–∏–Ω—è—Ç–∞.`);
    try {
      await ctx.telegram.sendMessage(
        userId,
        '–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –ø—Ä–æ–π–¥–µ–Ω–∞. –î–æ—Å—Ç—É–ø –∫ –∑–∞–∫–∞–∑–∞–º –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏. –ù–∞–∂–º–∏—Ç–µ ¬´–ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É¬ª.',
        Markup.inlineKeyboard([[Markup.button.callback('üí≥ –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É', 'sub_buy')]])
      );
    } catch {}
  });

  bot.action(/mod_reject:(\d+)/, async (ctx: Context) => {
    await ctx.answerCbQuery('–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏—á–∏–Ω–æ–π –æ—Ç–∫–∞–∑–∞.');
    await ctx.reply(
      '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ —Ç–µ–∫—Å—Ç–æ–º –ø—Ä–∏—á–∏–Ω—ã –æ—Ç–∫–∞–∑–∞ (reply).'
    );
  });

  bot.on('message', async (ctx: Context) => {
    const chatId = ctx.chat?.id;
    if (!chatId || chatId > 0) return; // —Ç–æ–ª—å–∫–æ –∫–∞–Ω–∞–ª/–≥—Ä—É–ø–ø–∞
    const msg = ctx.message as any | undefined;
    if (!msg) return;
    const replyTo = msg.reply_to_message?.message_id as number | undefined;
    if (!replyTo) return;
    const uid = pendingReasonByMsg.get(replyTo);
    if (!uid) return;
    const reason = 'text' in msg ? (msg.text as string) : '(–Ω–µ—Ç —Ç–µ–∫—Å—Ç–∞)';
    pendingReasonByMsg.delete(replyTo);
    await setVerificationStatus(uid, 'REJECTED', reason);
    await ctx.reply(`–û—Ç–∫–∞–∑ —Å–æ—Ö—Ä–∞–Ω—ë–Ω: ${uid}. –ü—Ä–∏—á–∏–Ω–∞: ${reason}`);
    try {
      await ctx.telegram.sendMessage(uid, `–í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞. –ü—Ä–∏—á–∏–Ω–∞: ${reason}`);
    } catch {}
  });
}
