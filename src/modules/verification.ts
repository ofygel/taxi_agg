import { Markup } from 'telegraf';
import { bot } from '../bot';
import type { MyContext, VerifFile } from '../types';
import { getSetting } from '../supabase';
import { upsertProfile } from './shared';
import { nowIso, replaceWith, sendEphemeral } from '../utils';
import { supabase, singleOrNull } from '../supabase';
import { kbBackHome } from './home';
import { saveTelegramFileToStorage } from '../storage';
import { isAdmin } from '../utils';

const rejectWait = new Map<number, { userId: number }>();

export function installVerification() {
  bot.action('drv_verify', async (ctx) => {
    await ctx.answerCbQuery();
    const profile = await singleOrNull<{ actor_role: 'TAXI'|'COURIER' }>(
      supabase.from('driver_profiles').select('actor_role').eq('user_telegram_id', ctx.from!.id)
    );
    const role = (profile.data?.actor_role ?? 'TAXI') as ('TAXI'|'COURIER');
    ctx.session = ctx.session || {};
    ctx.session.verif = { collecting: true, files: [], role, stepMsg: (ctx as any).callbackQuery?.message?.message_id || null };
    const instr = role === 'TAXI'
      ? '–û—Ç–ø—Ä–∞–≤—å—Ç–µ 2‚Äì3 —Ñ–æ—Ç–æ: 1) –≤–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–µ —É–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏–µ, 2) —Å–µ–ª—Ñ–∏ —Å —É–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏–µ–º.'
      : '–û—Ç–ø—Ä–∞–≤—å—Ç–µ 2 —Ñ–æ—Ç–æ: —É–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏–µ –ª–∏—á–Ω–æ—Å—Ç–∏ —Å –æ–±–µ–∏—Ö —Å—Ç–æ—Ä–æ–Ω.';
    try { await (ctx as any).deleteMessage?.(); } catch { }
    return sendEphemeral(ctx, `${instr}\n–ö–∞–∂–¥—ã–π —Ñ–∞–π–ª/—Ñ–æ—Ç–æ –ø—Ä–∏—Å—ã–ª–∞–π—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ–º. –ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ ‚Äî –Ω–∞–∂–º–∏—Ç–µ ¬´–ì–æ—Ç–æ–≤–æ¬ª. (0 –∑–∞–≥—Ä—É–∂–µ–Ω–æ)`,
      Markup.inlineKeyboard([
        [Markup.button.callback('üü¢ –ì–æ—Ç–æ–≤–æ, –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É', 'ver_submit')],
        [Markup.button.callback('üîô –ù–∞ –≥–ª–∞–≤–Ω—É—é', 'go_home')]
      ]));
  });

  // media aggregator –≤ –µ–¥–∏–Ω–æ–º middleware –±—É–¥–µ—Ç –≤—ã–∑—ã–≤–∞—Ç—å —ç—Ç–æ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫:
  // —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∏ –ø–æ–¥–∫–ª—é—á–∏–º –≤ registry –≤ orders.ts (–∏–ª–∏ index)
}

export async function verifMediaHandler(ctx: MyContext): Promise<boolean> {
  if (!ctx.session?.verif?.collecting) return false;
  const files: VerifFile[] = ctx.session.verif.files;
  const msg: any = ctx.message;
  if (msg.photo) {
    const ph = msg.photo[msg.photo.length - 1];
    files.push({ kind: 'photo', file_id: ph.file_id, caption: msg.caption || '' });
  } else if (msg.document) {
    files.push({ kind: 'document', file_id: msg.document.file_id, caption: msg.caption || '' });
  } else {
    return false;
  }
  await sendEphemeral(ctx, `–ü—Ä–∏–Ω—è—Ç–æ. –ó–∞–≥—Ä—É–∂–µ–Ω–æ: ${files.length}. –ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ ‚Äî ¬´–ì–æ—Ç–æ–≤–æ¬ª.`, kbBackHome());
  return true;
}

export function installVerificationActions() {
  bot.action('ver_submit', async (ctx) => {
    await ctx.answerCbQuery();
    const vf = ctx.session?.verif;
    if (!vf || !vf.files?.length) return replaceWith(ctx, '–ù—É–∂–Ω–æ –ø—Ä–∏—Å–ª–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ —Ñ–æ—Ç–æ/–¥–æ–∫—É–º–µ–Ω—Ç.', kbBackHome());
    const verifyChannelId = Number(await getSetting('verify_channel_id')) || 0;
    if (!verifyChannelId) return replaceWith(ctx, '–ö–∞–Ω–∞–ª –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω. –í—ã–ø–æ–ª–Ω–∏—Ç–µ /bind_verify_channel –≤ –∫–∞–Ω–∞–ª–µ.', kbBackHome());

    for (const [i, f] of vf.files.entries()) {
      await saveTelegramFileToStorage(ctx.from!.id, 'VERIFY', f.file_id, undefined, { index: i, role: vf.role });
    }

    const header =
      `ü™™ <b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é</b>\n` +
      `–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: <a href="tg://user?id=${ctx.from!.id}">${(ctx.from as any).first_name || ctx.from!.id}</a>\n` +
      `ID: <code>${ctx.from!.id}</code>\n–†–æ–ª—å: <b>${vf.role}</b>\n–§–∞–π–ª—ã –≤—ã–≥—Ä—É–∂–µ–Ω—ã –≤ Storage (media_assets: kind=VERIFY).`;

    try {
      await bot.telegram.sendMessage(verifyChannelId, header, {
        parse_mode: 'HTML',
        ...Markup.inlineKeyboard([
          [Markup.button.callback('‚úÖ –ü—Ä–∏–Ω—è—Ç—å', `ver_approve:${ctx.from!.id}`),
          Markup.button.callback('‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å', `ver_reject:${ctx.from!.id}`)]
        ])
      });
    } catch (e) { console.error('ver_submit send', e); return replaceWith(ctx, '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º.', kbBackHome()); }

    ctx.session.verif = null;
    return replaceWith(ctx, '–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞. –û–∂–∏–¥–∞–π—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫–∏.', kbBackHome());
  });

  bot.action(/ver_approve:(\d+)/, async (ctx) => {
    if (!isAdmin(ctx)) return ctx.answerCbQuery('–¢–æ–ª—å–∫–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—ã.');
    await ctx.answerCbQuery('OK');
    const uid = Number((ctx.match as any)[1]);
    await upsertProfile(uid, { status: 'APPROVED', verified_at: nowIso(), verified_by: ctx.from!.id });
    try { await (ctx as any).editMessageReplyMarkup?.({ inline_keyboard: [] }); } catch { }
    try {
      await bot.telegram.sendMessage(uid,
        '‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–π–¥–µ–Ω–∞. –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∑–∞–∫–∞–∑–∞–º –Ω—É–∂–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞: 7/15/30 –¥–Ω–µ–π. –ù–∞–∂–º–∏—Ç–µ ¬´–ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É¬ª.',
        Markup.inlineKeyboard([[Markup.button.callback('üõí –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É', 'sub_buy')], [Markup.button.callback('üîô –ù–∞ –≥–ª–∞–≤–Ω—É—é', 'go_home')]])
      );
    } catch { }
  });

  bot.action(/ver_reject:(\d+)/, async (ctx) => {
    if (!isAdmin(ctx)) return ctx.answerCbQuery('–¢–æ–ª—å–∫–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—ã.');
    await ctx.answerCbQuery('–ü—Ä–∏—à–ª–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –≤ —ç—Ç–æ—Ç –∂–µ –∫–∞–Ω–∞–ª');
    rejectWait.set(ctx.from!.id, { userId: Number((ctx.match as any)[1]) });
  });

  bot.on('text', async (ctx, next) => {
    const chId = (ctx.chat as any)?.id;
    const modId = ctx.from?.id || 0;
    const pending = rejectWait.get(modId);
    if (chId && pending) {
      const reason = (ctx.message as any).text.trim();
      rejectWait.delete(modId);
      await upsertProfile(pending.userId, { status: 'REJECTED', verify_comment: reason, verified_at: null, verified_by: null });
      try { await (ctx as any).editMessageReplyMarkup?.({ inline_keyboard: [] }); } catch { }
      try { await bot.telegram.sendMessage(pending.userId, `‚ùå –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.\n–ü—Ä–∏—á–∏–Ω–∞: ${reason}`); } catch { }
      return;
    }
    return next();
  });
}
