import { Telegraf, type Context, Markup } from 'telegraf';
import { ensureUserFromCtx } from '@/supabase';
import type { Role } from '@/types';
import { showHome } from './home';

export function register(bot: Telegraf<Context>) {
  bot.command('role', async (ctx: Context) => {
    await ctx.reply(
      '–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å:',
      Markup.inlineKeyboard([
        [
          Markup.button.callback('üöï –í–æ–¥–∏—Ç–µ–ª—å —Ç–∞–∫—Å–∏', 'set_role:DRIVER'),
          Markup.button.callback('üì¶ –ö—É—Ä—å–µ—Ä', 'set_role:COURIER')
        ],
        [Markup.button.callback('üë§ –ö–ª–∏–µ–Ω—Ç', 'set_role:CLIENT')]
      ])
    );
  });

  bot.action(/set_role:(DRIVER|COURIER|CLIENT)/, async (ctx: Context) => {
    await ctx.answerCbQuery();
    const match = (ctx as any).match as RegExpExecArray | undefined;
    if (!match) return;
    const role = match[1] as Role;

    await ensureUserFromCtx(ctx, { role });

    await ctx.deleteMessage();
    await ctx.reply(
      `–†–æ–ª—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: ${role === 'DRIVER' ? '–í–æ–¥–∏—Ç–µ–ª—å' : role === 'COURIER' ? '–ö—É—Ä—å–µ—Ä' : '–ö–ª–∏–µ–Ω—Ç'}`
    );

    if (role === 'DRIVER' || role === 'COURIER') {
      await ctx.reply(
        '–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å –∫–æ–Ω—Ç–∞–∫—Ç–æ–º, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å –∑–∞–∫–∞–∑—ã:',
        Markup.keyboard([[Markup.button.contactRequest('üì± –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º')]])
          .oneTime()
          .resize()
      );
    } else {
      await showHome(ctx);
    }
  });
}
