import { Telegraf, type Context, Markup } from 'telegraf';
import { ensureUserFromCtx } from '@/supabase';
import type { Role } from '@/types';

export function register(bot: Telegraf<Context>) {
  bot.command('role', async (ctx: Context) => {
    await ctx.reply(
      '–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å:',
      Markup.inlineKeyboard([
        [
          Markup.button.callback('üöï –í–æ–¥–∏—Ç–µ–ª—å —Ç–∞–∫—Å–∏', 'set_role:DRIVER'),
          Markup.button.callback('üì¶ –ö—É—Ä—å–µ—Ä', 'set_role:COURIER')
        ],
        [Markup.button.callback('üë§ –ö–ª–∏–µ–Ω—Ç', 'set_role:CLIENT')]
      ])
    );
  });

  bot.action(/set_role:(DRIVER|COURIER|CLIENT)/, async (ctx: Context) => {
    await ctx.answerCbQuery();
    const match = (ctx as any).match as RegExpExecArray | undefined;
    if (!match) return;
    const role = match[1] as Role;

    await ensureUserFromCtx(ctx, { role });

    await ctx.editMessageText(
      `–†–æ–ª—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: ${role === 'DRIVER' ? '–í–æ–¥–∏—Ç–µ–ª—å' : role === 'COURIER' ? '–ö—É—Ä—å–µ—Ä' : '–ö–ª–∏–µ–Ω—Ç'}`
    );

    if (role === 'DRIVER' || role === 'COURIER') {
      await ctx.reply(
        '–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∑–∞–∫–∞–∑–∞–º –ø—Ä–æ–π–¥–∏—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫—É:',
        Markup.inlineKeyboard([
          [Markup.button.callback('‚úÖ –ü—Ä–æ–π—Ç–∏ –ø—Ä–æ–≤–µ—Ä–∫—É', 'go_verify')]
        ])
      );
    }
  });
}
