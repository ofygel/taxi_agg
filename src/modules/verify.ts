import { Telegraf, Markup } from 'telegraf';
import { supabase, upsertProfile, getSetting } from '../supabase';
import { MyContext } from '../types';
import { sendEphemeral, nowIso } from '../utils';
import { saveTelegramFileToStorage } from './storage';

const rejectWait = new Map<number, { userId: number }>();

export function registerVerify(bot: Telegraf<MyContext>) {
  // –Ω–∞—á–∞–ª–æ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
  bot.action('drv_verify', async (ctx) => {
    await ctx.answerCbQuery();

    const profile = await supabase
      .from('driver_profiles')
      .select('actor_role')
      .eq('user_telegram_id', ctx.from!.id)
      .maybeSingle();

    const role = (profile.data?.actor_role as 'TAXI' | 'COURIER') || 'TAXI';

    ctx.session = ctx.session || {};
    ctx.session.verif = { collecting: true, files: [], role, stepMsg: (ctx as any).callbackQuery?.message?.message_id || null };

    const instr =
      role === 'TAXI'
        ? '–û—Ç–ø—Ä–∞–≤—å—Ç–µ 2‚Äì3 —Ñ–æ—Ç–æ: 1) –≤–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–µ —É–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏–µ, 2) —Å–µ–ª—Ñ–∏ —Å —É–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏–µ–º.'
        : '–û—Ç–ø—Ä–∞–≤—å—Ç–µ 2 —Ñ–æ—Ç–æ: —É–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏–µ –ª–∏—á–Ω–æ—Å—Ç–∏ —Å –æ–±–µ–∏—Ö —Å—Ç–æ—Ä–æ–Ω.';

    try { await (ctx as any).deleteMessage?.(); } catch {}

    return sendEphemeral(
      ctx,
      `${instr}\n–ö–∞–∂–¥—ã–π —Ñ–∞–π–ª/—Ñ–æ—Ç–æ –ø—Ä–∏—Å—ã–ª–∞–π—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ–º. –ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ ‚Äî –Ω–∞–∂–º–∏—Ç–µ ¬´–ì–æ—Ç–æ–≤–æ¬ª. (0 –∑–∞–≥—Ä—É–∂–µ–Ω–æ)`,
      Markup.inlineKeyboard([
        [Markup.button.callback('üü¢ –ì–æ—Ç–æ–≤–æ, –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É', 'ver_submit')],
        [Markup.button.callback('üîô –ù–∞ –≥–ª–∞–≤–Ω—É—é', 'go_home')],
      ]),
      120_000
    );
  });

  // –ø—Ä–∏—ë–º —Ñ–æ—Ç–æ/–¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
  bot.on(['photo', 'document'], async (ctx, next) => {
    if (!ctx.session?.verif?.collecting) return next();

    const files = ctx.session.verif.files;
    const msg: any = ctx.message;

    if (msg.photo) {
      const ph = msg.photo[msg.photo.length - 1];
      files.push({ kind: 'photo', file_id: ph.file_id, caption: msg.caption || '' });
    } else if (msg.document) {
      files.push({ kind: 'document', file_id: msg.document.file_id, caption: msg.caption || '' });
    }

    await sendEphemeral(ctx, `–ü—Ä–∏–Ω—è—Ç–æ. –ó–∞–≥—Ä—É–∂–µ–Ω–æ: ${files.length}. –ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ ‚Äî ¬´–ì–æ—Ç–æ–≤–æ¬ª.`, {}, 30_000);
  });

  // –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É
  bot.action('ver_submit', async (ctx) => {
    await ctx.answerCbQuery();

    const vf = ctx.session?.verif;
    if (!vf || !vf.files?.length) return sendEphemeral(ctx, '–ù—É–∂–Ω–æ –ø—Ä–∏—Å–ª–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ —Ñ–æ—Ç–æ/–¥–æ–∫—É–º–µ–Ω—Ç.');

    const verifyChannelId = Number(await getSetting('verify_channel_id')) || 0;
    if (!verifyChannelId) return sendEphemeral(ctx, '–ö–∞–Ω–∞–ª –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω. –í—ã–ø–æ–ª–Ω–∏—Ç–µ /bind_verify_channel –≤ –∫–∞–Ω–∞–ª–µ.');

    // —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ storage
    for (const [i, f] of vf.files.entries()) {
      await saveTelegramFileToStorage(ctx.from!.id, 'VERIFY', f.file_id, undefined, { index: i, role: vf.role });
    }

    const header =
      `ü™™ <b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é</b>\n` +
      `–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: <a href="tg://user?id=${ctx.from!.id}">${(ctx.from as any).first_name || ctx.from!.id}</a>\n` +
      `ID: <code>${ctx.from!.id}</code>\n–†–æ–ª—å: <b>${vf.role}</b>`;

    await bot.telegram.sendMessage(verifyChannelId, header, {
      parse_mode: 'HTML',
      ...Markup.inlineKeyboard([
        [Markup.button.callback('‚úÖ –ü—Ä–∏–Ω—è—Ç—å', `ver_approve:${ctx.from!.id}`),
         Markup.button.callback('‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å', `ver_reject:${ctx.from!.id}`)]
      ])
    });

    ctx.session.verif = null;
    return sendEphemeral(ctx, '–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞. –û–∂–∏–¥–∞–π—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫–∏.');
  });

  // –æ–¥–æ–±—Ä–µ–Ω–∏–µ
  bot.action(/ver_approve:(\d+)/, async (ctx) => {
    const uid = Number((ctx.match as any)[1]);
    await upsertProfile(uid, { status: 'APPROVED', verified_at: nowIso(), verified_by: ctx.from!.id });
    await ctx.answerCbQuery('OK');
  });

  // –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ ‚Üí –æ–∂–∏–¥–∞–Ω–∏–µ –ø—Ä–∏—á–∏–Ω—ã
  bot.action(/ver_reject:(\d+)/, async (ctx) => {
    rejectWait.set(ctx.from!.id, { userId: Number((ctx.match as any)[1]) });
    await ctx.answerCbQuery('–ü—Ä–∏—à–ª–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–µ–º');
  });

  // –ø—Ä–∏—ë–º –ø—Ä–∏—á–∏–Ω—ã –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è
  bot.on('text', async (ctx, next) => {
    const modId = ctx.from?.id || 0;
    const pending = rejectWait.get(modId);
    if (!pending) return next();

    rejectWait.delete(modId);
    const reason = (ctx.message as any).text.trim();
    await upsertProfile(pending.userId, { status: 'REJECTED', verify_comment: reason });
    await ctx.reply(`‚ùå –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.\n–ü—Ä–∏—á–∏–Ω–∞: ${reason}`);
  });
}
