import { Telegraf, type Context, Markup } from 'telegraf';
import { ensureSession, sendReplacing } from '@/shared';
import {
  getSetting,
  saveReceipt,
  openAccess,
  inviteButtonUrl
} from '@/supabase';

const PLAN_LABEL: Record<number, string> = {
  7: '7 –¥–Ω–µ–π ‚Äî 3000 ‚Ç∏',
  15: '15 –¥–Ω–µ–π ‚Äî 5000 ‚Ç∏',
  30: '30 –¥–Ω–µ–π ‚Äî 10000 ‚Ç∏'
};
const PLAN_PRICE: Record<number, number> = { 7: 3000, 15: 5000, 30: 10000 };

export function register(bot: Telegraf<Context>) {
  bot.action('sub_buy', async (ctx: Context) => {
    await ctx.answerCbQuery();
    await sendReplacing(
      ctx,
      '–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ä–æ–∫ –ø–æ–¥–ø–∏—Å–∫–∏:',
      Markup.inlineKeyboard([
        [
          Markup.button.callback('7', 'plan_7'),
          Markup.button.callback('15', 'plan_15'),
          Markup.button.callback('30', 'plan_30')
        ],
        [Markup.button.callback('‚Ü©Ô∏è –û—Ç–º–µ–Ω–∞', 'sub_cancel')]
      ])
    );
  });

  bot.action('sub_cancel', async (ctx: Context) => {
    await ctx.answerCbQuery();
    await sendReplacing(ctx, '–û—Ç–º–µ–Ω–µ–Ω–æ.');
  });

  bot.action(/plan_(7|15|30)/, async (ctx: Context) => {
    await ctx.answerCbQuery();
    const match = (ctx as any).match as RegExpExecArray | undefined;
    const days = Number(match?.[1] ?? 7);
    const price = PLAN_PRICE[days];
    const text = `–û–ø–ª–∞—Ç–∞: ${PLAN_LABEL[days]}

–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã Kaspi Gold: 4400 4302 1304 3729 (–ê–ª–º–∞ –°)
–ò–ª–∏ –ø–æ –Ω–æ–º–µ—Ä—É: 747 456 86 61 (–ê–ª–º–∞ –°)

–°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: ${price} ‚Ç∏

–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ ¬´–û—Ç–ø—Ä–∞–≤–∏—Ç—å —á–µ–∫¬ª.`;
    await sendReplacing(
      ctx,
      text,
      Markup.inlineKeyboard([
        [Markup.button.callback('üìé –û—Ç–ø—Ä–∞–≤–∏—Ç—å —á–µ–∫', `send_receipt:${days}`)]
      ])
    );
  });

  bot.action(/send_receipt:(7|15|30)/, async (ctx: Context) => {
    await ctx.answerCbQuery();
    const s = ensureSession(ctx);
    s.collecting = true;
    s.files = [];
    s.supportThreadId = Number(((ctx as any).match as RegExpExecArray)?.[1]);
    await sendReplacing(ctx, '–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç/—Ñ–∞–π–ª —á–µ–∫–∞ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.');
  });

  bot.on(['photo', 'document'], async (ctx: Context) => {
    const s = ensureSession(ctx);
    if (!s.collecting) return;

    const verifyChan = await getSetting('verify_channel_id');
    if (!verifyChan)
      return ctx.reply(
        '–ö–∞–Ω–∞–ª –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω. /bind_verify_channel –≤ –∫–∞–Ω–∞–ª–µ.'
      );

    const files: any[] = [];
    const m = ctx.message;
    if (!m) return;

    if ('photo' in m && Array.isArray(m.photo)) {
      const p = m.photo[m.photo.length - 1];
      files.push({ file_id: p.file_id });
    } else if ('document' in m && m.document) {
      files.push({
        file_id: m.document.file_id,
        file_name: m.document.file_name ?? undefined,
        mime_type: m.document.mime_type ?? undefined,
        size: m.document.file_size ?? undefined
      });
    }
    const planDays = Number(s.supportThreadId ?? 0) || 7;
    for (const f of files) await saveReceipt((ctx.from as any).id, planDays, f);

    await ctx.telegram.sendMessage(
      verifyChan,
      `–ü–æ—Å—Ç—É–ø–∏–ª —á–µ–∫ –æ–± –æ–ø–ª–∞—Ç–µ\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @${
        (ctx.from as any).username ?? (ctx.from as any).id
      }\n–¢–∞—Ä–∏—Ñ: ${PLAN_LABEL[planDays]}`,
      Markup.inlineKeyboard([
        [
          Markup.button.callback(
            'üîì –û—Ç–∫—Ä—ã—Ç—å –¥–æ—Å—Ç—É–ø',
            `pay_open:${(ctx.from as any).id}:${planDays}`
          )
        ],
        [
          Markup.button.callback(
            '‚ùå –û—Ç–∫–∞–∑–∞—Ç—å',
            `pay_reject:${((ctx.from as any).id as number)}`
          )
        ]
      ])
    );

    s.collecting = false;
    s.files = [];
    await sendReplacing(ctx, '–ß–µ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É. –û–∂–∏–¥–∞–π—Ç–µ.');
  });

  bot.action(/pay_open:(\d+):(\d+)/, async (ctx: Context) => {
    await ctx.answerCbQuery();
    const match = (ctx as any).match as RegExpExecArray | undefined;
    if (!match) return;
    const userId = Number(match[1]);
    const days = Number(match[2]);
    await openAccess(userId, days);
    const invite = (await getSetting('drivers_channel_invite')) ?? inviteButtonUrl();
    await ctx.editMessageText(`–î–æ—Å—Ç—É–ø –æ—Ç–∫—Ä—ã—Ç: ${userId} –Ω–∞ ${days} –¥–Ω–µ–π.`);
    if (invite) {
      try {
        await ctx.telegram.sendMessage(
          userId,
          `–û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞. –ù–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã –≤—Å—Ç—É–ø–∏—Ç—å –≤ –∫–∞–Ω–∞–ª –∑–∞–∫–∞–∑–æ–≤:`,
          Markup.inlineKeyboard([[Markup.button.url('üîó –í—Å—Ç—É–ø–∏—Ç—å', invite)]])
        );
      } catch {}
    } else {
      try {
        await ctx.telegram.sendMessage(
          userId,
          '–û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞. –°—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª –ø–æ–∫–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞.'
        );
      } catch {}
    }
  });

  const pendingPayReject = new Map<number, number>(); // msgId ‚Üí userId

  bot.action(/pay_reject:(\d+)/, async (ctx: Context) => {
    await ctx.answerCbQuery('–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏—á–∏–Ω–æ–π –æ—Ç–∫–∞–∑–∞.');
    const msg = (ctx.update as any).callback_query?.message as any | undefined;
    const msgId = msg?.message_id as number | undefined;
    if (typeof msgId === 'number') {
      const uid = Number(((ctx as any).match as RegExpExecArray)[1]);
      pendingPayReject.set(msgId, uid);
    }
  });

  bot.on('message', async (ctx: Context) => {
    const chatId = ctx.chat?.id;
    if (!chatId || chatId > 0) return; // —Ç–æ–ª—å–∫–æ –∫–∞–Ω–∞–ª/–≥—Ä—É–ø–ø–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏
    const msg = ctx.message as any | undefined;
    if (!msg) return;
    const replyTo = msg.reply_to_message?.message_id as number | undefined;
    if (!replyTo) return;
    const uid = pendingPayReject.get(replyTo);
    if (!uid) return;
    const reason = 'text' in msg ? (msg.text as string) : '(–Ω–µ—Ç —Ç–µ–∫—Å—Ç–∞)';
    pendingPayReject.delete(replyTo);
    await ctx.reply(`–û—Ç–∫–∞–∑ –ø–æ –æ–ø–ª–∞—Ç–µ —Å–æ—Ö—Ä–∞–Ω—ë–Ω: ${uid}. –ü—Ä–∏—á–∏–Ω–∞: ${reason}`);
    try {
      await ctx.telegram.sendMessage(uid, `–û–ø–ª–∞—Ç–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞. –ü—Ä–∏—á–∏–Ω–∞: ${reason}`);
    } catch {}
  });
}
