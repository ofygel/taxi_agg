import { Telegraf, type Context, Markup } from 'telegraf';
import type { ClientOrderSession } from '@/types';
import { ensureSession, sendReplacing, mapButtons } from '@/shared';
import { parseMapLink, haversineKm } from '@/geo';
import { createOrder } from '@/supabase';

function warnManualAddress(kind: 'TAXI' | 'DELIVERY') {
  const extra =
    kind === 'DELIVERY'
      ? '\n–î–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏ —É–∫–∞–∂–∏—Ç–µ –¥–µ—Ç–∞–ª–∏: —Ç–µ–ª–µ—Ñ–æ–Ω –ø–æ–ª—É—á–∞—Ç–µ–ª—è, –±–ª–æ–∫/–ø–æ–¥—ä–µ–∑–¥/—ç—Ç–∞–∂/–∫–≤–∞—Ä—Ç–∏—Ä–∞.'
      : '';
  return (
    '–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º —É–∫–∞–∑—ã–≤–∞—Ç—å –ª–æ–∫–∞—Ü–∏—é –∏–ª–∏ —Å—Å—ã–ª–∫—É ‚Äî —á—Ç–æ–±—ã –∏—Å–∫–ª—é—á–∏—Ç—å –¥—É–±–ª–∏–∫–∞—Ç—ã –∞–¥—Ä–µ—Å–æ–≤ –≤ –¥—Ä—É–≥–∏—Ö –≥–æ—Ä–æ–¥–∞—Ö.' +
    extra
  );
}

export function register(bot: Telegraf<Context>) {
  bot.hears('üöï –ó–∞–∫–∞–∑–∞—Ç—å —Ç–∞–∫—Å–∏', async (ctx: Context) => {
    const s = ensureSession(ctx);
    s.order = { step: 'WAIT_FROM', kind: 'TAXI' };
    await sendReplacing(
      ctx,
      '–û—Ç–∫—É–¥–∞ –∑–∞–±—Ä–∞—Ç—å?',
      Markup.keyboard([
        [{ text: 'üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ª–æ–∫–∞—Ü–∏—é', request_location: true }],
        [
          { text: '–í–≤–µ—Å—Ç–∏ –∞–¥—Ä–µ—Å –≤—Ä—É—á–Ω—É—é' },
          { text: '–í—Å—Ç–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É 2–ì–ò–°/–ù–∞–≤–∏–≥–∞—Ç–æ—Ä' }
        ],
        [{ text: '–ù–∞ –≥–ª–∞–≤–Ω—É—é' }]
      ]).resize()
    );
  });

  bot.hears('üì¶ –ó–∞–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç–∞–≤–∫—É', async (ctx: Context) => {
    const s = ensureSession(ctx);
    s.order = { step: 'WAIT_FROM', kind: 'DELIVERY' };
    await sendReplacing(
      ctx,
      '–û—Ç–∫—É–¥–∞ –∑–∞–±—Ä–∞—Ç—å? (–¥–æ—Å—Ç–∞–≤–∫–∞)',
      Markup.keyboard([
        [{ text: 'üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ª–æ–∫–∞—Ü–∏—é', request_location: true }],
        [
          { text: '–í–≤–µ—Å—Ç–∏ –∞–¥—Ä–µ—Å –≤—Ä—É—á–Ω—É—é' },
          { text: '–í—Å—Ç–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É 2–ì–ò–°/–ù–∞–≤–∏–≥–∞—Ç–æ—Ä' }
        ],
        [{ text: '–ù–∞ –≥–ª–∞–≤–Ω—É—é' }]
      ]).resize()
    );
  });

  bot.hears('–í–≤–µ—Å—Ç–∏ –∞–¥—Ä–µ—Å –≤—Ä—É—á–Ω—É—é', async (ctx: Context) => {
    const s = ensureSession(ctx);
    const o: ClientOrderSession = s.order ?? { step: 'IDLE' };
    if (o.step === 'IDLE') return;
    await sendReplacing(ctx, warnManualAddress(o.kind ?? 'TAXI'));
  });

  bot.hears('–í—Å—Ç–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É 2–ì–ò–°/–ù–∞–≤–∏–≥–∞—Ç–æ—Ä', async (ctx: Context) => {
    await sendReplacing(ctx, '–í—Å—Ç–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É ‚Äî —è –∏–∑–≤–ª–µ–∫—É –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã.');
  });

  bot.on('location', async (ctx: Context) => {
    const s = ensureSession(ctx);
    const o: ClientOrderSession = s.order ?? { step: 'IDLE' };
    const m = ctx.message;
    if (!m || !('location' in m) || !m.location) return;

    const lat = m.location.latitude;
    const lon = m.location.longitude;

    if (o.step === 'WAIT_FROM') {
      o.from_lat = lat;
      o.from_lon = lon;
      o.from_text = '–¢–æ—á–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è';
      o.step = 'WAIT_TO';
      s.order = o;
      await sendReplacing(
        ctx,
        '–ö—É–¥–∞ –µ—Ö–∞—Ç—å?',
        Markup.keyboard([
          [{ text: 'üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ª–æ–∫–∞—Ü–∏—é', request_location: true }],
          [
            { text: '–í–≤–µ—Å—Ç–∏ –∞–¥—Ä–µ—Å –≤—Ä—É—á–Ω—É—é' },
            { text: '–í—Å—Ç–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É 2–ì–ò–°/–ù–∞–≤–∏–≥–∞—Ç–æ—Ä' }
          ],
          [{ text: '–ù–∞ –≥–ª–∞–≤–Ω—É—é' }]
        ]).resize()
      );
      return;
    }

    if (o.step === 'WAIT_TO') {
      o.to_lat = lat;
      o.to_lon = lon;
      o.to_text = '–¢–æ—á–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è';
      if (o.from_lat && o.from_lon) {
        const dist = haversineKm(
          { lat: o.from_lat, lon: o.from_lon },
          { lat: o.to_lat!, lon: o.to_lon! }
        );
        o.distance_km = Math.round(dist * 10) / 10;
        o.price_estimate = Math.max(500, Math.round(500 + 150 * dist));
      }
      o.step = 'ASK_COMMENT';
      s.order = o;
      const kb = mapButtons({ lat: o.to_lat!, lon: o.to_lon! }, o.to_text);
      await sendReplacing(
        ctx,
        `–•–æ—Ç–∏—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–ª—è ${
          o.kind === 'DELIVERY' ? '–∫—É—Ä—å–µ—Ä–∞' : '–≤–æ–¥–∏—Ç–µ–ª—è'
        }?`,
        Markup.inlineKeyboard([
          [
            Markup.button.callback('–î–∞', 'cl_cmt_yes'),
            Markup.button.callback('–ù–µ—Ç', 'cl_cmt_no')
          ]
        ])
      );
      await ctx.reply('–ë—ã—Å—Ç—Ä—ã–µ —Å—Å—ã–ª–∫–∏:', kb);
      return;
    }
  });

  bot.on('text', async (ctx: Context) => {
    const s = ensureSession(ctx);
    const o: ClientOrderSession = s.order ?? { step: 'IDLE' };
    const m = ctx.message;
    if (!m || !('text' in m)) return;
    const t = m.text;

    if (o.step === 'WAIT_FROM') {
      const mm = parseMapLink(t);
      if (mm) {
        o.from_lat = mm.lat;
        o.from_lon = mm.lon;
        o.from_text = mm.label ?? '–¢–æ—á–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è';
      } else {
        o.from_text = t;
      }
      o.step = 'WAIT_TO';
      s.order = o;
      await sendReplacing(ctx, '–ö—É–¥–∞ –µ—Ö–∞—Ç—å?');
      return;
    }

    if (o.step === 'WAIT_TO') {
      const mm = parseMapLink(t);
      if (mm) {
        o.to_lat = mm.lat;
        o.to_lon = mm.lon;
        o.to_text = mm.label ?? '–¢–æ—á–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è';
      } else {
        o.to_text = t;
      }
      if (o.from_lat && o.from_lon && o.to_lat && o.to_lon) {
        const dist = haversineKm(
          { lat: o.from_lat, lon: o.from_lon },
          { lat: o.to_lat, lon: o.to_lon }
        );
        o.distance_km = Math.round(dist * 10) / 10;
        o.price_estimate = Math.max(500, Math.round(500 + 150 * dist));
      }
      o.step = 'ASK_COMMENT';
      s.order = o;
      await sendReplacing(
        ctx,
        `–•–æ—Ç–∏—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–ª—è ${
          o.kind === 'DELIVERY' ? '–∫—É—Ä—å–µ—Ä–∞' : '–≤–æ–¥–∏—Ç–µ–ª—è'
        }?`,
        Markup.inlineKeyboard([
          [
            Markup.button.callback('–î–∞', 'cl_cmt_yes'),
            Markup.button.callback('–ù–µ—Ç', 'cl_cmt_no')
          ]
        ])
      );
      return;
    }

    if (o.step === 'ASK_COMMENT') {
      o.comment_text = t;
      o.step = 'CONFIRM';
      s.order = o;
      await sendConfirm(ctx, o);
      return;
    }
  });

  bot.action('cl_cmt_yes', async (ctx: Context) => {
    await ctx.answerCbQuery();
    await sendReplacing(ctx, '–ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:');
    const s = ensureSession(ctx);
    const o = s.order;
    if (!o) return;
    o.step = 'ASK_COMMENT';
    s.order = o;
  });

  bot.action('cl_cmt_no', async (ctx: Context) => {
    await ctx.answerCbQuery();
    const s = ensureSession(ctx);
    const o = s.order;
    if (!o) return;
    o.comment_text = undefined;
    o.step = 'CONFIRM';
    s.order = o;
    await sendConfirm(ctx, o);
  });

  async function sendConfirm(ctx: Context, o: ClientOrderSession) {
    const summary = `–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∑–∞–∫–∞–∑:
–û—Ç–∫—É–¥–∞: ${o.from_text ?? '(–Ω–µ—Ç)'}
–ö—É–¥–∞: ${o.to_text ?? '(–Ω–µ—Ç)'}
–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${o.comment_text ?? '‚Äî'}
–û—Ü–µ–Ω–æ—á–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: ${o.price_estimate ? `${o.price_estimate} ‚Ç∏` : '‚Äî'}
–í—Å—ë –≤–µ—Ä–Ω–æ?`;
    await sendReplacing(
      ctx,
      summary,
      Markup.inlineKeyboard([
        [Markup.button.callback('‚úÖ –î–∞', 'cl_ok')],
        [Markup.button.callback('‚ùå –ù–µ—Ç, –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ', 'cl_restart')]
      ])
    );
  }

  bot.action('cl_restart', async (ctx: Context) => {
    await ctx.answerCbQuery();
    const s = ensureSession(ctx);
    s.order = { step: 'WAIT_FROM', kind: s.order?.kind ?? 'TAXI' };
    await sendReplacing(ctx, '–ù–∞—á–∏–Ω–∞–µ–º –∑–∞–Ω–æ–≤–æ. –û—Ç–∫—É–¥–∞ –∑–∞–±—Ä–∞—Ç—å?');
  });

  bot.action('cl_ok', async (ctx: Context) => {
    await ctx.answerCbQuery();
    const s = ensureSession(ctx);
    const o = s.order;
    if (!o) return;

    const created = await createOrder({
      client_id: (ctx.from as any).id,
      kind: o.kind ?? 'TAXI',
      from_text: o.from_text,
      from_lat: o.from_lat,
      from_lon: o.from_lon,
      to_text: o.to_text,
      to_lat: o.to_lat,
      to_lon: o.to_lon,
      comment_text: o.comment_text,
      price_estimate: o.price_estimate ?? undefined
    });

    (ctx as any).state = { createdOrderId: created.id };
    s.order = { step: 'IDLE' };
    await sendReplacing(ctx, '–ó–∞–∫–∞–∑ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω. –û–∂–∏–¥–∞–π—Ç–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è.');
  });
}
